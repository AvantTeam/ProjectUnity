sourceSets.main {
    java.srcDirs = ['src/']
}

import arc.files.*

final def dexedJar = (project(':main').tasks.deployDex as Jar).archiveFile.get().asFile
final def distJar = (project(':main').tasks.deploy as Jar).archiveFile.get().asFile
final def regularJar = (project(':main').tasks.deployDex as Jar).archiveFile.get().asFile

final def cp = dexedJar.exists() ? dexedJar : distJar.exists() ? distJar : regularJar

dependencies {
    if(
        !cp.exists() ||
        toolRecompile ||
        taskNames.contains('main:deploy') ||
        taskNames.contains('main:deployDex')
    ) {
        implementation project(':main')
    } else {
        implementation files(cp)
    }

    implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
    implementation "com.github.Anuken.Arc:natives-desktop:$arcVersion"
}

task rearchive {
    task appendDexed(type: Jar) {
        archiveFileName.set dexedJar.getName()
        from zipTree(dexedJar)
        from files(assetsDir)

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        doLast {
            new Fi(dexedJar).writeBytes(new Fi(file(archiveFile.get())).readBytes())
        }
    }

    task appendDist(type: Jar) {
        archiveFileName.set distJar.getName()
        from zipTree(distJar)
        from files(assetsDir)

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        doLast {
            new Fi(distJar).writeBytes(new Fi(file(archiveFile.get())).readBytes())
        }
    }

    def finalize = []
    if(distJar.exists() || taskNames.contains('main:deploy')) finalize += appendDist
    if(dexedJar.exists() || taskNames.contains('main:deployDex')) finalize += appendDexed

    finalizedBy finalize
}

task proc(dependsOn: [classes, configurations.runtimeClasspath]) {
    if(toolRearchive) finalizedBy rearchive

    doLast {
        javaexec {
            workingDir = assetsDir
            main = 'unity.tools.Tools'
            classpath = sourceSets.main.runtimeClasspath
        }
    }
}
