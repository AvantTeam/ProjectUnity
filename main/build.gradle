sourceSets.main {
    java.srcDirs = [
        'src/',
        "$projectDir/fetched",
        "$buildDir/generated/sources/annotationProcessor/java/main/"
    ]
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    compileOnly project(':annotations')
    annotationProcessor project(':annotations')
}

import arc.*
import arc.func.*
import arc.struct.*
import arc.util.*
import arc.util.serialization.*

ext {
    assetsDir = new File(rootDir, "main/assets/")

    fetchPackage = 'unity/fetched'
    fetchDir = new File("$projectDir/fetched/$fetchPackage")

    fetchTemp = new File("$projectDir/fetch.txt")
    fetchRevision = 1
}

task deploy(type: Jar, dependsOn: configurations.runtimeClasspath) {
    println "Compiling ${devBuild ? 'dev' : 'user'} build."

    archiveFileName = "${modName}Desktop.jar"

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    from files(project.assetsDir)
    from(rootDir) { include 'mod.json' }

    exclude 'unity/fetched/**'
    exclude 'unity/entities/comp/**'
    exclude 'unity/entities/merge/**'
    if(!devBuild) {
        exclude 'unity/mod/DevBuildImpl*'
    }
}

task dex(dependsOn: deploy) {
    def jarArtifact = file(tasks.deploy.archiveFile.get())
    def dexedArtifact = new File("$buildDir/libs", 'Dexed.jar')

    doLast { exec {
        workingDir "$buildDir/libs"

        def command = ['d8']
        def files = (
            configurations.compileClasspath.asList() +
            configurations.runtimeClasspath.asList() +
            [new File("${sdkRoot}/platforms/android-${sdkVersion}/android.jar")]
        )

        for(def file : files) {
            command += '--classpath'
            command += file.path
        }

        command += ['--min-api', sdkAPI, '--output', dexedArtifact, jarArtifact]
        if(windows) {
            commandLine('cmd', '/c', *command)
        } else {
            commandLine(*command)
        }
    }}
}

task deployDex(type: Jar, dependsOn: [deploy, dex]) {
    archiveFileName = "${modName}Dexed.jar"

    def jarArtifact = file(tasks.deploy.archiveFile.get())
    def dexedArtifact = new File("$buildDir/libs", 'Dexed.jar')

    from zipTree(jarArtifact)
    from zipTree(dexedArtifact)

    doLast { delete {
        delete jarArtifact
        delete dexedArtifact
    }}
}

class Fetcher {
    String name
    UnsafeRunnable run

    private Throwable error = null

    @SuppressWarnings('all')
    void execute() {
        Boolf<UnsafeRunnable> exec = { final UnsafeRunnable run ->
            try {
                run.run()
                error = null
            } catch(Throwable e) {
                error = e
            }

            error != null
        }

        while(exec.get(run)) {}
    }
}

task fetchComps {
    doFirst {
        delete { delete fetchDir }
        fetchDir.mkdir()

        Core.net = new Net()
        Core.net.setBlock(true)

        final Seq<Fetcher> fetches = new Seq<Fetcher>(Fetcher.class)

        final UnsafeRunnable mainRun = {
        Core.net.httpGet(
        "https://api.github.com/repos/Anuken/Mindustry/contents/core/src/mindustry/entities/comp?ref=$mindustryVersion",
        { res ->
            final def list = Jval.read(res.getResultAsString()).asArray()
            for(final Jval val : list) {
                final def filename = val.get('name').asString()
                final def fileurl = val.get('download_url').asString()

                final UnsafeRunnable run = {
                Core.net.httpGet(
                fileurl,
                { comp ->
                    final def content = comp.getResultAsString()
                        .replace('mindustry.entities.comp', "$fetchPackage".replace('/', '.') as String)
                        .replace('mindustry.annotations.Annotations.*', 'unity.annotations.Annotations.*')
                        .replaceAll('@Component\\((base = true|.)+\\)\n*', '@EntityComponent(base = true, write = false)\n')
                        .replaceAll('@Component\n*', '@EntityComponent(write = false)\n')
                        .replaceAll('@BaseComponent\n*', '@EntityBaseComponent\n')
                        .replaceAll('@CallSuper\n*', '')
                        .replaceAll('@Final\n*', '')
                        .replaceAll('@EntityDef\\(*.*\\)*\n*', '')

                    if(content.isBlank()) throw new IllegalStateException()

                    final def fi = Fi.get("$fetchDir/$filename")
                    fi.writeString(content, false)
                },
                { err -> throw new RuntimeException(err) })}

                fetches.add(new Fetcher(name: filename, run: run))
            }
        },
        { err -> throw new RuntimeException(err) })}

        new Fetcher(run: mainRun).execute()
        final def found = fetches.size

        Seq<Thread> threads = fetches.map({ final Fetcher fetch -> new Thread({
            fetch.execute()
            synchronized(fetches) {
                fetches.remove(fetch)
            }
        }) })

        threads.each(Thread::start)
        while(!fetches.isEmpty()) Thread.currentThread().yield()

        fetchTemp.text = "$mindustryVersion/$fetchRevision"
        println "Wrote $found entity components."
    }
}

task cleanFetched(type: Delete) {
    delete "$projectDir/fetched"
    delete "$fetchTemp"
}

tasks.withType(JavaCompile) {
    if(!fetchDir.exists() || !fetchTemp.exists()) {
        dependsOn fetchComps
    } else {
        String[] content = fetchTemp.text.split('/')
        String ver = content[0]
        String rev = content[1]

        if(ver != "$mindustryVersion" as String || rev != Integer.toString(fetchRevision as int)) {
            dependsOn fetchComps
        }
    }
}

jar {
    exclude 'unity/fetched/**'
    exclude 'unity/entities/comp/**'
    exclude 'unity/entities/merge/**'
    if(!devBuild) {
        exclude 'unity/mod/DevBuildImpl*'
    }
}
