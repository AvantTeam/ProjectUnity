buildscript{
    dependencies{
        classpath "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
        classpath "com.github.Anuken.Arc:arc-core:$arcVersion"
    }

    repositories{
        google()
        mavenCentral()
        maven{ url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven{ url 'https://oss.sonatype.org/content/repositories/releases/' }
        maven{ url 'https://jitpack.io' }
    }
}

plugins{
    id 'java-library'
    id 'maven-publish'

    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.kapt' version '1.6.21'
}

import arc.util.io.*
import arc.struct.*

final StringMap props = new StringMap()
props.with{
    def local = file("$rootDir/local.properties")

    def map = it
    if(local.exists()) local.withReader{ PropertiesUtils.load(map, it) }
}

configure(allprojects){
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group = 'com.github.GlennFolker'
    version = modVersion

    ext{
        mindustry = { String submodule ->
            return "com.github.Anuken.MindustryJitpack$submodule:$mindustryVersion"
        }

        arc = { String submodule ->
            return "com.github.Anuken.Arc$submodule:$arcVersion"
        }

        hasProp = { String key ->
            return project.hasProperty(key) || props.containsKey(key)
        }

        prop = { String key ->
            return project.hasProperty(key) ? project.property(key) : props.get(key)
        }

        sdkRoot = System.getenv('ANDROID_HOME') ?: System.getenv('ANDROID_SDK_ROOT')
        taskNames = gradle.startParameter.taskNames
        compilerVersion = JavaVersion.current().ordinal() - JavaVersion.VERSION_17.ordinal() + 17

        assetsDir = file("${project(':mod').projectDir}/assets")
        assetsRawDir = file("${project(':mod').projectDir}/assets-raw")
        spritesDir = file("$assetsDir/sprites")
        spritesRawDir = file("$assetsRawDir/sprites")

        // `-Pmod.dev` will initiate a developer build. Default is `false`.
        devBuild = hasProp('mod.dev') && Boolean.parseBoolean(prop('mod.dev'))
    }

    repositories{
        mavenCentral()
        maven{ url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven{ url 'https://oss.sonatype.org/content/repositories/releases/' }
        maven{ url 'https://jitpack.io' }
    }

    task sourcesJar(type: Jar, dependsOn: classes){
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts{
        archives sourcesJar
    }

    java{
        withJavadocJar()
        withSourcesJar()

        toolchain{
            languageVersion = JavaLanguageVersion.of(compilerVersion)
        }
    }

    publishing{
        publications{
            maven(MavenPublication){
                from components.java
            }
        }
    }

    tasks.withType(JavaCompile){
        options.deprecation = true
        options.incremental = true
        options.encoding = 'UTF-8'
    }
}

configure([project(':annotations'), project(':downgrader')]){
    sourceCompatibility = 8
    tasks.withType(JavaCompile){
        sourceCompatibility = 8
        targetCompatibility = 8
    }
}

configure(project(':common')){
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'

    sourceCompatibility = compilerVersion
    kotlin{
        jvmToolchain{
            languageVersion = JavaLanguageVersion.of(compilerVersion)
        }
    }

    kapt{
        useBuildCache = false
        correctErrorTypes = true
        keepJavacAnnotationProcessors = true

        javacOptions{
            option('-source', compilerVersion)
            option('-target', '1.8')

            option("-ArevisionDirectory=${project(':annotations').projectDir}/assets/revisions")
        }
    }

    compileKotlin{
        outputs.upToDateWhen{ true }
    }

    tasks.withType(JavaCompile){
        sourceCompatibility = compilerVersion
        options.release = 8
    }
}

configure([project(':core'), project(':mod'), project(':tools')] + project(':factions').subprojects){
    sourceCompatibility = compilerVersion
    tasks.withType(JavaCompile){
        sourceCompatibility = compilerVersion
        options.release = 8
    }
}
